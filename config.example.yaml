# Global rule engine settings
rule_engine:
  stall_limit: 3                 # Default strikes before removal (overridden by service/category)
  grace_period_minutes: 0            # Do not strike/remove within this age since first seen
  no_progress_max_age_minutes: 0     # Remove if no byte progress for this long (0 disables)
  min_request_interval_ms: 0         # Per-service throttle between API calls (0 disables)
  max_concurrent_requests: 0         # Per-service concurrent API calls (0 = unlimited)
  remove_from_client: true           # Also remove from download client to reclaim disk
  use_blocklist_param: true          # Prefer 'blocklist' over 'blacklist' when supported
  max_queue_age_hours: 0             # Hard cap: remove any incomplete item older than this age (0 disables)
  tracker_error_strikes: 2           # Remove after this many tracker error detections
  # Min-speed stall rule (requires client integration)
  min_speed_bytes_per_sec: 0         # e.g., 51200 (50KB/s)
  min_speed_duration_minutes: 0      # Require below threshold for this many minutes
  # Reannounce/recheck before removal for 0-seed torrents
  reannounce:
    enabled: true
    cooldown_minutes: 60
    max_attempts: 1
    do_recheck: false
    only_when_seeds_zero: true
  # Size-aware policy: aggressively remove very large items stuck at 0 seeders
  large_size_gb: 20
  large_zero_seeders_remove_minutes: 30
  large_progress_ceiling_percent: 100

# Notifications
notifications:
  # Multiple destinations with per-reason routing
  destinations:
    # Example Discord destination (batched)
    - name: discord-default
      type: discord
      url: ""
      batch: true
      template: "Removed {service} id={id} title={title} reason={reason}"
      reasons: ["*"]  # wildcard = all reasons

    # Example Slack destination (immediate)
    - name: slack-errors
      type: slack
      url: ""
      batch: false
      template: "[{service}] Removed {title} (id={id}) due to {reason}"
      reasons: ["tracker_error", "indexer_failure_policy"]

    # Example generic webhook destination (JSON body)
    - name: generic-json
      type: generic
      url: ""
      headers:
        Authorization: "Bearer <token>"
      batch: true
      # When raw_json is true, the template must produce a valid JSON object.
      raw_json: true
      template: '{"service":"{service}","id":{id},"title":"{title}","reason":"{reason}"}'
      reasons: ["strike_limit", "max_age", "no_progress_timeout"]

# Per-service overrides (optional)
services:
  Sonarr:
    stall_limit: 3
    grace_period_minutes: 0
    no_progress_max_age_minutes: 0
    min_request_interval_ms: 0
    max_concurrent_requests: 0
    # Optional per-service rules (can also be overridden per-category)
    client_state_as_stalled: false
    client_zero_activity_minutes: 0
  Radarr:
    stall_limit: 3
    grace_period_minutes: 0
    no_progress_max_age_minutes: 0
    min_request_interval_ms: 0
    max_concurrent_requests: 0
  Lidarr:
    stall_limit: 3
    grace_period_minutes: 0
    no_progress_max_age_minutes: 0
    min_request_interval_ms: 0
    max_concurrent_requests: 0

# Indexer-aware policies (optional)
indexer_policies:
  SomeIndexerName:
    seeder_stall_threshold: 0   # override global seeder threshold for this indexer

# Optional: download client settings for reannounce
clients:
  qbittorrent:
    url: "http://qbittorrent:8080"
    username: "admin"
    password: "adminadmin"
  transmission:
    url: "http://transmission:9091/transmission/rpc"
    username: ""
    password: ""
  deluge:
    url: "http://deluge:8112/json"
    username: ""     # optional for web
    password: "deluge"

# Whitelist items you never want removed
whitelist:
  ids: []                # queue item IDs
  download_ids: []       # torrent hashes (downloadId)
  title_contains: []     # case-insensitive substrings

# Category/profile-based overrides (first match wins)
categories:
  - title_contains: ["2160p", "UHD"]
    stall_limit: 1
    no_progress_max_age_minutes: 60
    min_speed_bytes_per_sec: 20480
  - title_contains: ["Anime"]
    stall_limit: 1
    grace_period_minutes: 5
