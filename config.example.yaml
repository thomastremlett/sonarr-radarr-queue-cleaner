
# General application settings (prefer YAML over env; env remains fallback)
general:
  api_timeout: 3600                 # seconds between runs
  # strike_file_path: /app/data/strikes.json
  debug_logging: false
  structured_logs: true
  dry_run: false
  explain_decisions: true
  request_timeout: 10               # per-request HTTP timeout
  retry_attempts: 2
  retry_backoff: 1.0                # seconds, exponential backoff base
  reset_strikes_on_progress: all    # 'all' or integer decrement amount
  torrent_seeder_stall_threshold: -1          # see README; -1 disables
  torrent_seeder_stall_progress_ceiling: 25.0 # percent

# Global rule engine settings
rule_engine:
  stall_limit: 6                 # Default strikes before removal (overridden by service/category)
  grace_period_minutes: 0            # Do not strike/remove within this age since first seen
  no_progress_max_age_minutes: 0     # Remove if no byte progress for this long (0 disables)
  min_request_interval_ms: 0         # Per-service throttle between API calls (0 disables)
  max_concurrent_requests: 0         # Per-service concurrent API calls (0 = unlimited)
  remove_from_client: true           # Also remove from download client to reclaim disk
  use_blocklist_param: true          # Prefer 'blocklist' over 'blacklist' when supported
  max_queue_age_hours: 0             # Hard cap: remove any incomplete item older than this age (0 disables)
  tracker_error_strikes: 2           # Remove after this many tracker error detections
  # Min-speed stall rule (requires client integration)
  min_speed_bytes_per_sec: 0         # e.g., 51200 (50KB/s)
  min_speed_duration_minutes: 0      # Require below threshold for this many minutes
  # Reannounce/recheck before removal for 0-seed torrents
  reannounce:
    enabled: true
    cooldown_minutes: 60
    max_attempts: 1
    do_recheck: false
    only_when_seeds_zero: true
  # Size-aware policy: aggressively remove very large items stuck at 0 seeders
  large_size_gb: 20
  large_zero_seeders_remove_minutes: 30
  large_progress_ceiling_percent: 50

# Notifications
notifications:
  # Multiple destinations with per-reason routing
  destinations:
    # # Example Discord destination (batched)
    # - name: discord-default
    #   type: discord
    #   url: ""
    #   batch: true
    #   template: "Removed {service} id={id} title={title} reason={reason}"
    #   reasons: ["*"]  # wildcard = all reasons

    # # Example Slack destination (immediate)
    # - name: slack-errors
    #   type: slack
    #   url: ""
    #   batch: false
    #   template: "[{service}] Removed {title} (id={id}) due to {reason}"
    #   reasons: ["tracker_error", "indexer_failure_policy"]

    # # Example generic webhook destination (JSON body)
    # - name: generic-json
    #   type: generic
    #   url: ""
    #   headers:
    #     Authorization: "Bearer <token>"
    #   batch: true
    #   # When raw_json is true, the template must produce a valid JSON object.
    #   raw_json: true
    #   template: '{"service":"{service}","id":{id},"title":"{title}","reason":"{reason}"}'
    #   reasons: ["strike_limit", "max_age", "no_progress_timeout"]

# Per-service overrides (optional)

services:
  Sonarr:
    # Trigger a new search after removal/blacklist by this cleaner
    auto_search: false
    # Number of strikes before an item is removed
    stall_limit: 3
    grace_period_minutes: 0
    no_progress_max_age_minutes: 0
    # Throttling per service (0 disables)
    min_request_interval_ms: 0  # minimum ms between API calls
    max_concurrent_requests: 0  # max concurrent API calls
    # Optional per-service rules (can also be overridden per-category)
    client_state_as_stalled: false          # treat certain client states as stalled
    client_zero_activity_minutes: 0         # consider stalled if peers=0 and seeds=0 for this many minutes
  Radarr:
    # Trigger a new search after removal/blacklist by this cleaner
    auto_search: false
    stall_limit: 3
    grace_period_minutes: 0
    no_progress_max_age_minutes: 0
    min_request_interval_ms: 0
    max_concurrent_requests: 0
  Lidarr:
    # Trigger a new search after removal/blacklist by this cleaner
    auto_search: false
    stall_limit: 3
    grace_period_minutes: 0
    no_progress_max_age_minutes: 0
    min_request_interval_ms: 0
    max_concurrent_requests: 0
    # Note: API keys are set via environment variables (e.g., SONARR_API_KEY, RADARR_API_KEY, LIDARR_API_KEY)

# Indexer-aware policies (optional)
indexer_policies:
  SomeIndexerName:
    seeder_stall_threshold: 0   # override global seeder threshold for this indexer
    failure_remove_after: 0     # remove after N tracker/indexer failures for this indexer (0 disables)

# Optional: download client settings for reannounce
clients:
  qbittorrent:
    url: "http://qbittorrent:8080"
    username: "admin"
    password: "adminadmin"
  transmission:
    url: "http://transmission:9091/transmission/rpc"
    username: ""
    password: ""
  deluge:
    url: "http://deluge:8112/json"
    username: ""     # optional for web
    password: "deluge"

# Whitelist items you never want removed
whitelist:
  ids: []                # queue item IDs
  download_ids: []       # torrent hashes (downloadId)
  title_contains: []     # case-insensitive substrings

# Category/profile-based overrides (first match wins)
categories:
  - title_contains: ["2160p", "UHD"]
    stall_limit: 1
    no_progress_max_age_minutes: 60
    min_speed_bytes_per_sec: 20480
  - title_contains: ["Anime"]
    stall_limit: 1
    grace_period_minutes: 5
